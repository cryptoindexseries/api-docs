openapi: "3.0.1"
info:
  title: "CIS Public API"
  version: "1.0.0"
  description: |
    # Authentication

    In order use the APIs documented here you need to generate a **API Key ID** and **API Key Secret**. There are two
    types of requests this documentation explains; public data APIs and private user data APIs. For accessing public data APIs
    only **API Key ID** is required. For private user data APIs a signature should be generated using **API Key Secret**.

    For all requests **API Key ID** should be included in Authorization header in Bearer format. E.g.

    ```
    GET /ExamplePublicRequest
    Headers:
      - Authorization: Bearer my-api-key-id
    ```

    In addition to that for private user data APIs a **signature** from **current timestamp (in seconds precision)** should be generated and both
    signature and timestamp should be put as a query parameter to every request. E.g.

    ```
    GET /ExamplePrivateRequest?timestamp=1625609684&sign=my-signature
    Headers:
       - Authorization: Bearer my-api-key-id
    ```

    Signature should be generated by using HMAC SHA256. The HMAC SHA256 signature is a keyed HMAC SHA256 operation.
    Use your **API Key Secret** as the key and **timestamp** query parameter as the value for the HMAC operation.

    An example in NodeJS using [CryptoJS](https://www.npmjs.com/package/crypto-js) library for generating signatures

    ```node
    const apiSecret = "2028c72a-2bd3-4b0d-9e0e-1c9b5d4274df";
    const timestamp = 1625609684
    let query = 'timestamp=' + timestamp
    const sign = CryptoJS.HmacSHA256(query, apiSecret).toString(CryptoJS.enc.Hex);
    console.log(sign)
    >> bccfa3ff9fbdfaf48426d689dcaa23b5874ffbbf17acfa887036ff5d26461831
    ```

    Some additional warnings and constraints;
    * Timestamp should be in seconds precision
    * If signature is generated from a timestamp that is older than 1 minute, the request is rejected
    * Authentication information is cached for 1 minute
    * Please do not share your API Secret Key and If you think your key is exposed somehow please recreate it.


    # Websocket API

    In this part, you can find the details of consuming data from our realtime websocket feed.

    Our servers are implemented using [Socket.IO](https://socket.io/) library (Version 4.14). In order take advantage of its ease of use and features like
    automatic reconnection using a socket.io client is highly recommended. But you can find details of connecting with bare WebSocket implementation.

    WebSocket Location: wss://socket.dev.cryptoindexseries.com

    Some definitions that are useful for rest of the documentation;

    **Symbol**: An instrument that includes base, quote currencies with exchange information.
    ```
    BTC-USDT.BNB -> BTC-USDT pair from Binance
    BTC-USDT.CISCALC -> BTC-USDT pair that we (Crypto Indexx Series) calculated from various exchanges
    BTC-USDT.CBS -> BTC-USDT pair from CoinBasePro
    ....
    ```

    **Type of feed**: Indicates the type of data you want to receive for a symbol. Possible values are TICKER and TRADE. When concatenated
    with symbol it defines the data that you will receive from WebSocket feed.
    ```
    BTC-USDT.BNB~TICKER -> Ticker data of BTC-USDT from Binance
    BTC-USDT.BNB~TRADE -> Trades of BTC-USDT from Binance
    ....
    ```

    **Action**: Indicates either `subscribe` or `unsubscribe` actions. When you subscribe to feed of an instrument you start receiving updates
    for that instrument. When you unsubscribe from an instrument you stop receiving updates from an instrument.

    ## Authentication

    WebSocket API expects your **API Key ID** as query parameter with name **token**. E.g

    wss://socket.dev.cryptoindexseries.com?token=my-api-key-id

    ## Subscription

    In order to receive updates for an instrument first you need to subscribe to an instrument pair. We are expecting a message similar to this

    ```node
    {
        "action" : "subscribe", // Our action is subscription
        "data": ["BTC-USDT.BNB~TICKER"] // Multiple instrument can be add here
    }
    ```

    When you send such a message you will first receive and acknowledgement message:
    ```
    OK|SUB|BTC-USDT.BNB~TICKER
    ```
    Then you will get a snapshot message similar to the following;

    ```

    {
      "p": {
        // Payload
      },
      "ns": "BNB_BTCUSDT", // Native symbol of the instrument prefixed with exchangeCode_
      "d": "TICKER", // Type of data feed
      "seqnum": 6854283, // Sequence number to keep track of updates
      "u_ts": 1625613863270, // Time of broadcast
      "mt": "snapshot", // Message type
      "s": "BTC-USDT.BNB" // CryptoIndexSeries symbol
    }
    ```

    After receiving the snapshot whenever and update occurs on instrument it will be published to your feed.

    In order keep our Websocket API efficient we are only publishing changed fields, you will only get snapshot when you first send subscription request
    to WebSocket API. Then you will start getting updates which will only include changed fields. Depending on your needs, you are expected to keep a live snapshot
    in your client. Integrity of your live snapshot can be checked using sequence numbers (seqnum), in any case if you miss some messages you can send subscription request
    again to get a full snapshot.

    An example scenario would be;
    ```
    // First message (Snapshot)
    {
        "p" {
            "lst": 10000
            "v" : 100000000000000
        },
        seqnum: 123
        mt: "snaphot"
    }

    // First update (Valid Seqnum)
    {
        "p" {
            "lst": 10002 // Volume did not change, only latest price changed
        },
        seqnum: 124
        mt: "update"
    }

    // Second update (Invalid Seqnum)
    {
        "p" {
            "lst": 100034 // Volume did not change, only latest price changed
        },
        seqnum: 126 // This means you missed update 125
        mt: "update"
    }

    // In this case you need to send subscribe request again to get full snapshot
    ```

    ## Unsubscription
    To unsubscribe from an instrument WebSocket API expects a message like the following;

    ```node
    {
        "action" : "unsubscribe", // Our action is un-subscription
        "data": ["BTC-USDT.BNB~TICKER"] // Multiple instrument can be add here
    }
    ```

    When you send such a message you will first receive and acknowledgement message:
    ```
    OK|UNSUB|BTC-USDT.BNB~TICKER
    ```

    ## (Example) Connecting Using Socket.IO Client

    ```node
    const options = {
        path: "/",
        transports: ['websocket'],
        query: {
            token: "my-public-api-token"
        }
    };

    // Create socket connection
    const socket = io("wss://socket.dev.cryptoindexseries.com", options);

    /**
     * Handler for handling messages from realtime feed
     * @param message
     */
    function handleMesasge(message) {
        // Do something with message
    }


    /**
     * Subscribe to a instrument
     *
     * @param data E.g. List of symbols to subscribe
     */
    function subscribe(data) {
        // Send subscribe message
        socket.emit('m', {action: 'subscribe', data: data});
        // Bind handler function (m here a channel in socket.io, out of context)
        socket.on("m", handleMesasge);
    }

    /**
     * Unsubscribe from instrument(s)
     *
     * @param List of instrument(s) to unsubscribe
     */
    function unsubscribe(instruments) {
        socket.emit('m', {action: 'unsubscribe', data: instruments});
    }


    ```

    ## (Example) Connecting Using Bare WebSockets

    ```node

    // WS library used here mimic native browser WebSockets
    const WebSocket = require('ws');
    // Craete connection (with additional parameters)
    const socket = new WebSocket("wss://socket.dev.cryptoindexseries.com?transport=websocket&EIO=4&token=my-public-api-token");

    /**
     * Handler for handling messages from realtime feed
     * @param message
     */
    function handleMesasge(message) {
        // Do something with message
    }

    /**
     * Subscribe to a instrument
     *
     * @param insturments List of symbols to subscribe
     */
    function subscribe(insturments) {
        // First encode message
        const encoded = encodeMessage({action: 'subscribe', data: insturments})
        // Send subscribe message
        socket.send(encoded)
    }

    /**
     * Unsubscribe from instrument(s)
     *
     * @param insturments List of instrument(s) to unsubscribe
     */
    function unsubscribe(instruments) {
        // First encode message
        const encoded = encodeMessage({action: 'subscribe', data: insturments})
        // Send unsubscribe message
        socket.send(encoded);
    }

    /**
     * Encode mesage so socket.io can understand
     * @param data
     */
    function encodeMessage(data) {
        // This should be like 42["m",{...subscribe/unsubscribe action data...}]
        return `42["m",` + JSON.stringify(data) +`]`
    }

    /**
     * Decode message so socket.io can understand
     * @param data
     */
    function decodeMessage(data) {
        // These are reqular messages with that requries simple encoding/decoding
        // This is like 42["m", "{....message data...}"]
        const sliced = message.data.slice(2, message.data.length);
        const json = JSON.parse(sliced);
        const payload = json[1];
        return payload; // Realtime feed message
    }

    // Socket message handler
    socket.onmessage = function handler(message) {
        if (message.data.startsWith(0)) {
            // There is an initialization process due to socket.io protocol this must
            // be completed before subscription events
            socket.send("40");
        } else if (message.data.startsWith(2)) {
            // 2 indicates ping message you need to send pong (3) whenever ping recieved
            // If you don't your connection will closed.
            socket.send("3");
        } else if (message.data.startsWith(42)) {
            // These are reqular messages which require simple encoding/decoding
            const message = decodeMessage(message.data);
            // Use message payload as you wish
            handleMessage(message);
        }
    }
    ```
servers:
- url: "https://g7i2e522m0.execute-api.eu-central-1.amazonaws.com/{basePath}"
  variables:
    basePath:
      default: "/prod"
tags:
- name: Coin
  description: Endpoints for accessing coin data
  x-tag-expanded: true
- name: Exchange
  description: Exchange Data Endpoints
  x-tag-expanded: false
- name: Index
  description: Endpoints for accessing Index data
  x-tag-expanded: false
- name: Info
  description: General API Info
  x-tag-expanded: false
- name: Metadata
  description: Endpoints for accessing metadata
  x-tag-expanded: false
- name: News
  description: News Endpoints
  x-tag-expanded: false
- name: Reports
  description: Reports Endpoints
  x-tag-expanded: false
- name: Search
  description: Search Endpoints
  x-tag-expanded: false
- name: Sector
  description: Sector Endpoints
  x-tag-expanded: false
- name: Timeseries
  description: Timeseries Endpoints
  x-tag-expanded: false
- name: Asset
  description: Endpoints for accessing asset data
  x-tag-expanded: false
- name: Indicator
  description: Indicator Endpoints
  x-tag-expanded: false
- name: XRef
  description: Endpoints for accessing xref data
  x-tag-expanded: false
- name: "Portfolio CRUD"
  description:
  x-tag-expanded: false
- name: "Account CRUD"
  description: 
  x-tag-expanded: false
- name: "Account-Portfolio Relation"
  description: 
  x-tag-expanded: false
- name: "Balance"
  description: 
  x-tag-expanded: false
- name: "Trade"
  description: 
  x-tag-expanded: false
- name: "Transfer"
  description: 
  x-tag-expanded: false
- name: "Document"
  description: 
  x-tag-expanded: false
- name: "Trading"
  description: 
  x-tag-expanded: false
- name: "Portfolio CRUD"
- name: "Account CRUD"
- name: "Account-Portfolio Relation"
- name: "Balance"
- name: "Trade"
- name: "Transfer"
- name: "Document"
- name: "Trading"
paths:
  /portfolio/cis-portfolio/account/{account_id}/trade/document:
    get:
      tags:
      - "Trade"
      summary: "List Trade Documents"
      parameters:
      - name: "account_id"
        in: "path"
        description: "ID of the account belongs to user."
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "Successful response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
      security:
      - CustomAuthorizerRequest: []
    options:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
  /trading/cis-trading/{key_id}/trades:
    get:
      tags:
      - "Trading"
      summary: "Fetch Trades"
      parameters:
      - name: "key_id"
        in: "path"
        description: "ID of the account/key that belongs to user."
        required: true
        schema:
          type: "string"
      - name: "symbol"
        in: "query"
        description: "Native symbol of the trades "
        schema:
          type: "string"
      responses:
        "200":
          description: "Successful response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
      security:
      - CustomAuthorizerRequest: []
    options:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
  /portfolio/cis-portfolio/account/{account_id}/trade:
    post:
      tags:
      - "Trade"
      summary: "Add Trade"
      parameters:
      - name: "account_id"
        in: "path"
        description: "ID of the account belongs to user."
        required: true
        schema:
          type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TradeRequest"
        required: true
      responses:
        "200":
          description: "Successful response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
      security:
      - CustomAuthorizerRequest: []
    options:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
  /portfolio/cis-portfolio/account/{account_id}:
    put:
      tags:
      - "Account CRUD"
      summary: "Update Account Name"
      parameters:
      - name: "account_id"
        in: "path"
        description: "ID of the account belongs to user."
        required: true
        schema:
          type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateAccount"
        required: true
      responses:
        "200":
          description: "Successful response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
      security:
      - CustomAuthorizerRequest: []
    delete:
      tags:
      - "Account CRUD"
      summary: "Delete Account"
      parameters:
      - name: "account_id"
        in: "path"
        description: "ID of the account belongs to user."
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "Successful response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
      security:
      - CustomAuthorizerRequest: []
    options:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
  /portfolio/cis-portfolio/account/{account_id}/document/export/trade:
    post:
      tags:
      - "Document"
      summary: "Export Trade Document"
      parameters:
      - name: "account_id"
        in: "path"
        description: "ID of the account belongs to user."
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "Successful response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
      security:
      - CustomAuthorizerRequest: []
    options:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
  /portfolio/cis-portfolio/account/{account_id}/transfer/{transfer_id}:
    put:
      tags:
      - "Transfer"
      summary: "Update Transfer"
      parameters:
      - name: "transfer_id"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "account_id"
        in: "path"
        description: "ID of the account belongs to user."
        required: true
        schema:
          type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TransferRequest"
        required: true
      responses:
        "200":
          description: "Successful response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
      security:
      - CustomAuthorizerRequest: []
    delete:
      tags:
      - "Transfer"
      summary: "Delete Transfer"
      parameters:
      - name: "transfer_id"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "account_id"
        in: "path"
        description: "ID of the account belongs to user."
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "Successful response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
      security:
      - CustomAuthorizerRequest: []
    options:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
  /portfolio/cis-portfolio/account/{account_id}/document/export/transfer:
    post:
      tags:
      - "Document"
      summary: "Export Transfer Document"
      parameters:
      - name: "account_id"
        in: "path"
        description: "ID of the account belongs to user."
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "Successful response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
      security:
      - CustomAuthorizerRequest: []
    options:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
  /trading/cis-trading/{key_id}/balances:
    get:
      tags:
      - "Trading"
      summary: "Fetch Balances"
      parameters:
      - name: "key_id"
        in: "path"
        description: "ID of the account/key that belongs to user."
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "Successful response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
      security:
      - CustomAuthorizerRequest: []
    options:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
  /portfolio/cis-portfolio/account/{account_id}/transfer:
    post:
      tags:
      - "Transfer"
      summary: "Add Transfer"
      parameters:
      - name: "account_id"
        in: "path"
        description: "ID of the account belongs to user."
        required: true
        schema:
          type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TransferRequest"
        required: true
      responses:
        "200":
          description: "Successful response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
      security:
      - CustomAuthorizerRequest: []
    options:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
  /portfolio/cis-portfolio/portfolio:
    get:
      tags:
      - "Portfolio CRUD"
      summary: "Get Portfolios of User"
      responses:
        "200":
          description: "Successful response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
      security:
      - CustomAuthorizerRequest: []
    post:
      tags:
      - "Portfolio CRUD"
      summary: "Create Portfolio"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PortfolioRequest"
        required: true
      responses:
        "200":
          description: "Successful response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
      security:
      - CustomAuthorizerRequest: []
    options:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
  /portfolio/cis-portfolio/account/{account_id}/trade/{trade_id}:
    put:
      tags:
      - "Trade"
      summary: "Update Trade"
      parameters:
      - name: "trade_id"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "account_id"
        in: "path"
        description: "ID of the account belongs to user."
        required: true
        schema:
          type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TradeRequest"
        required: true
      responses:
        "200":
          description: "Successful response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
      security:
      - CustomAuthorizerRequest: []
    delete:
      tags:
      - "Trade"
      summary: "Delete Trade"
      parameters:
      - name: "trade_id"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "account_id"
        in: "path"
        description: "ID of the account belongs to user."
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "Successful response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
      security:
      - CustomAuthorizerRequest: []
    options:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
  /portfolio/cis-portfolio/portfolio/{portfolio_id}/account:
    get:
      tags:
      - "Account-Portfolio Relation"
      summary: "Get Accounts of Portfolio"
      parameters:
      - name: "portfolio_id"
        in: "path"
        description: "ID of the portfolio belongs to user."
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "Successful response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
      security:
      - CustomAuthorizerRequest: []
    options:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
  /portfolio/cis-portfolio/portfolio/{portfolio_id}/account/{account_id}:
    put:
      tags:
      - "Account-Portfolio Relation"
      summary: "Add Account to Portfolio"
      parameters:
      - name: "portfolio_id"
        in: "path"
        description: "ID of the portfolio belongs to user."
        required: true
        schema:
          type: "string"
      - name: "account_id"
        in: "path"
        description: "ID of the account belongs to user."
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "Successful response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
      security:
      - CustomAuthorizerRequest: []
    delete:
      tags:
      - "Account-Portfolio Relation"
      summary: "Delete Account from Portfolio"
      parameters:
      - name: "portfolio_id"
        in: "path"
        description: "ID of the portfolio belongs to user."
        required: true
        schema:
          type: "string"
      - name: "account_id"
        in: "path"
        description: "ID of the account belongs to user."
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "Successful response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
      security:
      - CustomAuthorizerRequest: []
    options:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
  /portfolio/cis-portfolio/account/{account_id}/document/{document_id}:
    get:
      tags:
      - "Document"
      summary: "Download a Document"
      parameters:
      - name: "document_id"
        in: "path"
        description: "ID of the document belongs to user."
        required: true
        schema:
          type: "string"
      - name: "account_id"
        in: "path"
        description: "ID of the account belongs to user."
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "Successful response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
      security:
      - CustomAuthorizerRequest: []
    options:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
  /portfolio/cis-portfolio/account/{account_id}/document/import/trade:
    post:
      tags:
      - "Document"
      summary: "Import Trade Document"
      parameters:
      - name: "account_id"
        in: "path"
        description: "ID of the account belongs to user."
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "Successful response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
      security:
      - CustomAuthorizerRequest: []
    options:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
  /portfolio/cis-portfolio/balance/history:
    get:
      tags:
      - "Balance"
      summary: "Balance History Request"
      parameters:
      - name: "ccy"
        in: "query"
        description: "Currency"
        schema:
          type: "string"
      - name: "account_ids"
        in: "query"
        description: "List of account ids in a comma-seperated fashion"
        schema:
          type: "string"
      responses:
        "200":
          description: "Successful response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
      security:
      - CustomAuthorizerRequest: []
    options:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
  /portfolio/cis-portfolio/account:
    get:
      tags:
      - "Account CRUD"
      summary: "Get Accounts of User"
      responses:
        "200":
          description: "Successful response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
      security:
      - CustomAuthorizerRequest: []
    post:
      tags:
      - "Account CRUD"
      summary: "Create Exchange Account"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateAccount"
        required: true
      responses:
        "200":
          description: "Successful response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
      security:
      - CustomAuthorizerRequest: []
    options:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
  /trading/cis-trading/{key_id}/order:
    post:
      tags:
      - "Trading"
      summary: "Create Order"
      parameters:
      - name: "key_id"
        in: "path"
        description: "ID of the account/key that belongs to user."
        required: true
        schema:
          type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrderRequest"
        required: true
      responses:
        "200":
          description: "Successful response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
      security:
      - CustomAuthorizerRequest: []
    options:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
  /trading/cis-trading/{key_id}/order/{order_id}:
    get:
      tags:
      - "Trading"
      summary: "Read Order"
      parameters:
      - name: "key_id"
        in: "path"
        description: "ID of the account/key that belongs to user."
        required: true
        schema:
          type: "string"
      - name: "symbol"
        in: "query"
        description: "Native Symbol of the order "
        schema:
          type: "string"
      - name: "order_id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "Successful response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
      security:
      - CustomAuthorizerRequest: []
    delete:
      tags:
      - "Trading"
      summary: "Cancel Order"
      parameters:
      - name: "key_id"
        in: "path"
        description: "ID of the account/key that belongs to user."
        required: true
        schema:
          type: "string"
      - name: "symbol"
        in: "query"
        description: "Native symbol of the order intented to be deleted"
        schema:
          type: "string"
      - name: "order_id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "Successful response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
      security:
      - CustomAuthorizerRequest: []
    options:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
  /portfolio/cis-portfolio/balance:
    get:
      tags:
      - "Balance"
      summary: "Current Balance Request"
      parameters:
      - name: "account_ids"
        in: "query"
        description: "List of account ids in a comma-seperated fashion"
        schema:
          type: "string"
      responses:
        "200":
          description: "Successful response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
      security:
      - CustomAuthorizerRequest: []
    options:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
  /portfolio/cis-portfolio/portfolio/{portfolio_id}:
    put:
      tags:
      - "Portfolio CRUD"
      summary: "Update Portfolio"
      parameters:
      - name: "portfolio_id"
        in: "path"
        description: "ID of the portfolio belongs to user."
        required: true
        schema:
          type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PortfolioRequest"
        required: true
      responses:
        "200":
          description: "Successful response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
      security:
      - CustomAuthorizerRequest: []
    delete:
      tags:
      - "Portfolio CRUD"
      summary: "Delete Portfolio"
      parameters:
      - name: "portfolio_id"
        in: "path"
        description: "ID of the portfolio belongs to user."
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "Successful response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
      security:
      - CustomAuthorizerRequest: []
    options:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
  /trading/cis-trading/{key_id}/order/open:
    get:
      tags:
      - "Trading"
      summary: "Get Open Orders"
      parameters:
      - name: "key_id"
        in: "path"
        description: "ID of the account/key that belongs to user."
        required: true
        schema:
          type: "string"
      - name: "symbol"
        in: "query"
        description: "Native symbol of the orders"
        schema:
          type: "string"
      responses:
        "200":
          description: "Successful response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
      security:
      - CustomAuthorizerRequest: []
    options:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
  /portfolio/cis-portfolio/account/{account_id}/transfer/document:
    get:
      tags:
      - "Transfer"
      summary: "List Transfer Documents"
      parameters:
      - name: "account_id"
        in: "path"
        description: "ID of the account belongs to user."
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "Successful response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
      security:
      - CustomAuthorizer: []
    options:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
  /portfolio/cis-portfolio/trade:
    get:
      tags:
      - "Trade"
      summary: "Trade History Request"
      parameters:
      - name: "start"
        in: "query"
        description: "Filter trades made after this date"
        schema:
          type: "string"
      - name: "quoted_assets"
        in: "query"
        description: "Filter trades that has these assets as quoted asset"
        schema:
          type: "string"
      - name: "page_size"
        in: "query"
        description: "How many items returned on single call (page)"
        schema:
          type: "string"
      - name: "page_number"
        in: "query"
        description: "Used to get results that are next in line"
        schema:
          type: "string"
      - name: "end"
        in: "query"
        description: "Filter trades made before this date"
        schema:
          type: "string"
      - name: "base_assets"
        in: "query"
        description: "Filter trades that has these assets as base asset"
        schema:
          type: "string"
      - name: "exchange_codes"
        in: "query"
        description: "Filter trades that is performed on given exchange(s)"
        schema:
          type: "string"
      - name: "account_ids"
        in: "query"
        description: "List of account ids in comma-seperated fashion"
        schema:
          type: "string"
      - name: "asset_types"
        in: "query"
        description: "?"
        schema:
          type: "string"
      - name: "order_by_field"
        in: "query"
        description: "Order result by given field"
        schema:
          type: "string"
      - name: "order_by_direction"
        in: "query"
        description: "Ordering direction (asc|desc)"
        schema:
          type: "string"
      - name: "portfolio_id"
        in: "query"
        description: "Id of portfolio to read trade history from"
        schema:
          type: "string"
      responses:
        "200":
          description: "Successful response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
      security:
      - CustomAuthorizerRequest: []
    options:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
  /portfolio/cis-portfolio/account/{account_id}/document/import/transfer:
    post:
      tags:
      - "Document"
      summary: "Import Transfer Document"
      parameters:
      - name: "account_id"
        in: "path"
        description: "ID of the account belongs to user."
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "Successful response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
      security:
      - CustomAuthorizerRequest: []
    options:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
  /portfolio/cis-portfolio/transfer:
    get:
      tags:
      - "Transfer"
      summary: "Transfer History Request"
      parameters:
      - name: "start"
        in: "query"
        description: "Filter transfers made after this date"
        schema:
          type: "string"
      - name: "page_size"
        in: "query"
        description: "How many items returned on single call (page)"
        schema:
          type: "string"
      - name: "page_number"
        in: "query"
        description: "Used to get results that are next in line"
        schema:
          type: "string"
      - name: "end"
        in: "query"
        description: "Filter transfers made before this date"
        schema:
          type: "string"
      - name: "account_ids"
        in: "query"
        description: "List of account ids in comma-seperated fashion to read transfers\
          \ from"
        schema:
          type: "string"
      - name: "order_by_field"
        in: "query"
        description: "Order result by given field"
        schema:
          type: "string"
      - name: "order_by_direction"
        in: "query"
        description: "Ordering direction (asc|desc)"
        schema:
          type: "string"
      - name: "portfolio_id"
        in: "query"
        description: "Id of portfolio to read trade history from"
        schema:
          type: "string"
      - name: "assets"
        in: "query"
        description: "Filter transfers that are made with these asset(s)"
        schema:
          type: "string"
      responses:
        "200":
          description: "Successful response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
      security:
      - CustomAuthorizerRequest: []
    options:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"             
/Asset/GetAssetPrices:
    get:
      tags:
      - Asset
      summary: GetAssetPrices
      description: Fetch a list of asset prices and change data for a list of assets
        in a key currency
      parameters:
      - name: assets
        in: query
        description: comma separated list of asset symbols
        required: true
        schema:
          type: string
          description: comma separated list of asset symbols
          example: BTC,ETH,ADA
      - name: ccy
        in: query
        description: key currency
        schema:
          type: string
          description: key currency
          default: BTC
          nullable: true
          example: USD
      responses:
        '200':
          description: Success
    post:
      tags:
      - Asset
      summary: GetAssetPrices
      description: Fetch a list of asset prices and change data for a list of assets
        in a key currency
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/get_asset_prices_request_model"
          text/json:
            schema:
              "$ref": "#/components/schemas/get_asset_prices_request_model"
          application/*+json:
            schema:
              "$ref": "#/components/schemas/get_asset_prices_request_model"
      responses:
        '200':
          description: Success      
/Coin/GetCoin:
    get:
      tags:
      - Coin
      summary: GetCoin
      description: Fetch Descriptive data for a coin
      parameters:
      - name: coin_symbol
        in: query
        description: The alphanumeric code of the coin to retrieve
        required: true
        schema:
          type: string
          description: The alphanumeric code of the coin to retrieve
          example: BTC
      - name: language_code
        in: query
        description: The code for the language
        schema:
          type: string
          description: The code for the language
          default: en
          nullable: true
          example: en
      responses:
        '200':
          description: Coin data
/Coin/GetAllCoins:
    get:
      tags:
      - Coin
      summary: GetAllCoins
      description: Fetch a list of all coins and a small amount of descriptive data
        for each
      parameters:
      - name: language_code
        in: query
        description: The code for the language
        schema:
          type: string
          description: The code for the language
          default: en
          nullable: true
          example: en
      responses:
        '200':
          description: Coin List
/Coin/GetCoinDominance:
    get:
      tags:
      - Coin
      summary: GetCoinDominance
      description: Returns total mkt cap and top 10 coisn and their dominance in the
        currency requested
      parameters:
      - name: ccy
        in: query
        description: The ccy code
        schema:
          type: string
          description: The ccy code
          default: USD
          nullable: true
          example: USD
      responses:
        '200':
          description: Json Object containing total mkt cap and coin dominance
          content:
            text/plain:
              schema:
                type: string
/Exchange/ExchangeInfo:
    get:
      tags:
      - Exchange
      summary: ExchangeInfo
      description: Fetch exchange information
      parameters:
      - name: exchange_code
        in: query
        description: The code for the exchange
        required: true
        schema:
          type: string
          description: The code for the exchange
          example: BNB
      - name: language_code
        in: query
        description: The code for the language
        schema:
          type: string
          description: The code for the language
          default: en
          nullable: true
          example: en
      responses:
        '200':
          description: Exchange Information
/Exchange/ExchangeList:
    get:
      tags:
      - Exchange
      summary: ExchangeList
      description: Fetch list of all exchanges
      parameters:
      - name: language_code
        in: query
        description: The code for the language
        schema:
          type: string
          description: The code for the language
          default: en
          nullable: true
          example: en
      responses:
        '200':
          description: Exchange List
/Exchange/ConnectableExchangeList:
    get:
      tags:
      - Exchange
      summary: ConnectableExchangeList
      description: Fetch list of all exchanges that are connectable
      parameters:
      - name: language_code
        in: query
        description: The code for the language
        schema:
          type: string
          description: The code for the language
          default: en
          nullable: true
          example: en
      responses:
        '200':
          description: Connectable Exchange List
/Exchange/ExchangeProductList:
    get:
      tags:
      - Exchange
      summary: ExchangeProductList
      description: Fetch list of all products on an exchange
      parameters:
      - name: exchange_code
        in: query
        description: The code for the exchange
        required: true
        schema:
          type: string
          description: The code for the exchange
          example: BNB
      responses:
        '200':
          description: Exchange List
/Exchange/ExchangeAssetList:
    get:
      tags:
      - Exchange
      summary: ExchangeAssetList
      description: Fetch list of all assets (fiat and crypto) recognised by the exchange
        along with the equivalent CIS symbol for the asset
      parameters:
      - name: exchange_code
        in: query
        description: The code for the exchange
        required: true
        schema:
          type: string
          description: The code for the exchange
          example: BNB
      responses:
        '200':
          description: Exchange Asset List
/Exchange/ProductInfo:
    get:
      tags:
      - Exchange
      summary: ProductInfo
      description: Fetch relevant product info for a given product / exchange
      parameters:
      - name: cis_native_symbol
        in: query
        description: The CIS native symbol for the product (exchange code + "_" +
          exchange native symbol for the product in upper case)
        required: true
        schema:
          type: string
          description: The CIS native symbol for the product (exchange code + "_"
            + exchange native symbol for the product in upper case)
          example: BNB_BTCUSDT
      responses:
        '200':
          description: Exchange Product Info
          content:
            text/plain:
              schema:
                type: string
/Exchange/ExchangeSpotInstrumentList:
    get:
      tags:
      - Exchange
      summary: ExchangeInstrumentList
      description: Fetch list of all instruments for the exchange along with the equivalent
        CIS symbol for the instrument
      parameters:
      - name: exchange_code
        in: query
        description: The code for the exchange
        required: true
        schema:
          type: string
          description: The code for the exchange
          example: BNB
      responses:
        '200':
          description: Exchange Instrument List
/Index/GetAllIndices:
    get:
      tags:
      - Index
      summary: GetAllIndices
      description: Fetch a list of all indices and a small amount of descriptive data
        for each
      parameters:
      - name: language_code
        in: query
        description: The code for the language
        schema:
          type: string
          description: The code for the language
          default: en
          nullable: true
          example: en
      responses:
        '200':
          description: Index List
/Index/GetIndexFull:
    get:
      tags:
      - Index
      summary: GetIndexFull
      description: Gets full data for a given index
      parameters:
      - name: index_code
        in: query
        description: The index code
        required: true
        schema:
          type: string
          description: The index code
          example: CISBIG10
      - name: ccy_code
        in: query
        description: The currency for the index data
        schema:
          type: string
          description: The currency for the index data
          default: BTC
          nullable: true
          example: USD
      - name: language_code
        in: query
        description: The code for the language
        schema:
          type: string
          description: The code for the language
          default: en
          nullable: true
          example: en
      responses:
        '200':
          description: Full Index Data
/Index/GetIndexConstituents:
    get:
      tags:
      - Index
      summary: GetIndexConstituents
      description: Gets full data for a given index
      parameters:
      - name: index_code
        in: query
        description: The index code
        required: true
        schema:
          type: string
          description: The index code
          example: CISBIG10
      - name: ccy_code
        in: query
        description: The currency for the index data
        schema:
          type: string
          description: The currency for the index data
          default: BTC
          nullable: true
          example: USD
      - name: page_number
        in: query
        description: ''
        schema:
          type: integer
          description: ''
          format: int32
          default: 1
          example: 1
      - name: page_size
        in: query
        description: ''
        schema:
          type: integer
          description: ''
          format: int32
          default: 20
          example: 20
      - name: language_code
        in: query
        description: The code for the language
        schema:
          type: string
          description: The code for the language
          default: en
          nullable: true
          example: en
      responses:
        '200':
          description: Index Constituents
/Indicator/GetIndicatorList:
    get:
      tags:
      - Indicator
      summary: GetIndicatorList
      description: Get a list of Indicators avaiable
      responses:
        '200':
          description: A list of Indicators
          content:
            text/plain:
              schema:
                type: string
/Indicator/GetIndicatorTemplates:
    get:
      tags:
      - Indicator
      summary: GetIndicatorTemplates
      description: Get a list of Pre Set Templates
      responses:
        '200':
          description: A list of Templates
          content:
            text/plain:
              schema:
                type: string
/Indicator/GetIndicators:
    post:
      tags:
      - Indicator
      summary: GetIndicators
      description: Request a list of Indicators for a symbol / interval
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/is_indicator_request"
          text/json:
            schema:
              "$ref": "#/components/schemas/is_indicator_request"
          application/*+json:
            schema:
              "$ref": "#/components/schemas/is_indicator_request"
      responses:
        '200':
          description: A list of Calculated Indicators for the requested symbol /
            interval / indicators
          content:
            text/plain:
              schema:
                type: string
/Metadata/GetLanguages:
    get:
      tags:
      - Metadata
      summary: GetLanguages
      description: Gets a list of supported languages
      parameters:
      - name: page_number
        in: query
        description: ''
        schema:
          type: integer
          description: ''
          format: int32
          default: 1
          example: 1
      - name: page_size
        in: query
        description: ''
        schema:
          type: integer
          description: ''
          format: int32
          default: 1000
          example: 20
      responses:
        '200':
          description: Language List
/Metadata/GetMetaData:
    get:
      tags:
      - Metadata
      summary: GetMetaData
      description: Get full metadata for the application
      parameters:
      - name: language_code
        in: query
        description: The code for the language
        schema:
          type: string
          description: The code for the language
          default: en
          nullable: true
          example: en
      responses:
        '200':
          description: Meta Data
/Metadata/GetNewsTagsMetaData:
    get:
      tags:
      - Metadata
      summary: GetNewsTagsMetaData
      description: Get News Meta Tags
      parameters:
      - name: language_code
        in: query
        description: The code for the language
        schema:
          type: string
          description: The code for the language
          default: en
          nullable: true
          example: en
      responses:
        '200':
          description: News Meta Tags
          content:
            text/plain:
              schema:
                type: string
/Metadata/GetNewsSources:
    get:
      tags:
      - Metadata
      summary: GetNewsSources
      description: Get News Sources
      parameters:
      - name: language_code
        in: query
        schema:
          type: string
          default: en
          nullable: true
      responses:
        '200':
          description: News Sources
          content:
            text/plain:
              schema:
                type: string
/News/NewsById:
    get:
      tags:
      - News
      summary: Retrieve a news article by its id
      parameters:
      - name: id
        in: query
        description: The id of the news article
        schema:
          type: string
          description: The id of the news article
          nullable: true
      responses:
        '200':
          description: Success
/News/NewsSearch:
    get:
      tags:
      - News
      summary: NewsSearch
      description: Perform a search across all news data
      parameters:
      - name: news_sources
        in: query
        description: ''
        schema:
          type: string
          description: ''
          nullable: true
          example: coin_desk
      - name: tags
        in: query
        description: ''
        schema:
          type: array
          items:
            type: string
          description: ''
          nullable: true
      - name: keywords_search
        in: query
        description: ''
        schema:
          type: string
          description: ''
          nullable: true
          example: mining
      - name: min_publication_datetime
        in: query
        description: ''
        schema:
          type: integer
          description: ''
          format: int64
          nullable: true
          example: 1589141374000
      - name: max_publication_datetime
        in: query
        description: ''
        schema:
          type: integer
          description: ''
          format: int64
          nullable: true
          example: 1589141374000
      - name: min_sentiment
        in: query
        description: ''
        schema:
          type: number
          description: ''
          format: double
          nullable: true
          example: -1
      - name: max_sentiment
        in: query
        description: ''
        schema:
          type: number
          description: ''
          format: double
          nullable: true
          example: 1
      - name: order_by
        in: query
        description: ''
        schema:
          type: array
          items:
            type: string
          description: ''
          nullable: true
      - name: language_code
        in: query
        description: The code for the language
        schema:
          type: string
          description: The code for the language
          default: en
          nullable: true
          example: en
      - name: page_size
        in: query
        description: ''
        schema:
          type: integer
          description: ''
          format: int32
          default: 20
          example: 20
      - name: page_number
        in: query
        description: ''
        schema:
          type: integer
          description: ''
          format: int32
          default: 1
          example: 1
      responses:
        '200':
          description: News Article List
    post:
      tags:
      - News
      summary: NewsSearch
      description: Perform a search across all news data
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/news_search_model_body"
          text/json:
            schema:
              "$ref": "#/components/schemas/news_search_model_body"
          application/*+json:
            schema:
              "$ref": "#/components/schemas/news_search_model_body"
      responses:
        '200':
          description: News Article List
/News/NewsSentimentHistory:
    get:
      tags:
      - News
      summary: NewsSentimentHistory
      description: Get a timeseries of News Sentiment
      parameters:
      - name: news_sources
        in: query
        description: ''
        schema:
          type: string
          description: ''
          nullable: true
          example: coin_desk
      - name: tags
        in: query
        description: ''
        schema:
          type: array
          items:
            type: string
          description: ''
          nullable: true
      - name: keywords_search
        in: query
        description: ''
        schema:
          type: string
          description: ''
          nullable: true
          example: mining
      - name: min_publication_datetime
        in: query
        description: ''
        schema:
          type: integer
          description: ''
          format: int64
          nullable: true
          example: 1589141374000
      - name: max_publication_datetime
        in: query
        description: ''
        schema:
          type: integer
          description: ''
          format: int64
          nullable: true
          example: 1589141374000
      - name: language_code
        in: query
        description: ''
        schema:
          type: string
          description: ''
          default: en
          nullable: true
          example: en
      - name: interval
        in: query
        description: ''
        schema:
          type: string
          description: ''
          default: 1d
          nullable: true
          example: 1d
      - name: positive_sentiment_limit
        in: query
        description: ''
        schema:
          type: number
          description: ''
          format: double
          default: 0.2
          example: 0.2
      - name: negative_sentiment_limit
        in: query
        description: ''
        schema:
          type: number
          description: ''
          format: double
          default: -0.2
          example: -0.2
      responses:
        '200':
          description: News Sentiment History
/Search/SpotSearch:
    get:
      tags:
      - Search
      summary: SpotSearch
      description: Search for spot symbols across the entire universe
      parameters:
      - name: search_string
        in: query
        description: ''
        schema:
          type: string
          description: ''
          nullable: true
      - name: source_code
        in: query
        description: ''
        schema:
          type: array
          items:
            type: string
          description: ''
          nullable: true
      - name: source_rating_code
        in: query
        description: ''
        schema:
          type: array
          items:
            type: string
          description: ''
          nullable: true
      - name: is_exchange
        in: query
        description: ''
        schema:
          type: boolean
          description: ''
          nullable: true
      - name: is_connectable
        in: query
        description: ''
        schema:
          type: boolean
          description: ''
          nullable: true
      - name: base_asset
        in: query
        description: ''
        schema:
          type: array
          items:
            type: string
          description: ''
          nullable: true
      - name: quoted_asset
        in: query
        description: ''
        schema:
          type: array
          items:
            type: string
          description: ''
          nullable: true
      - name: order_by_field
        in: query
        description: ''
        schema:
          "$ref": "#/components/schemas/spot_search_order_by"
      - name: order_by_direction
        in: query
        description: ''
        schema:
          "$ref": "#/components/schemas/order_by_direction"
      - name: page_number
        in: query
        description: ''
        schema:
          type: integer
          description: ''
          format: int32
          default: 1
      - name: page_size
        in: query
        description: ''
        schema:
          type: integer
          description: ''
          format: int32
          default: 20
      - name: language_code
        in: query
        description: ''
        schema:
          type: string
          description: ''
          default: en
          nullable: true
      responses:
        '200':
          description: Spot list
          content:
            text/plain:
              schema:
                type: string
    post:
      tags:
      - Search
      summary: SpotSearch
      description: Search for spot symbols across the entire universe
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/srch_spot_search_input_model"
          text/json:
            schema:
              "$ref": "#/components/schemas/srch_spot_search_input_model"
          application/*+json:
            schema:
              "$ref": "#/components/schemas/srch_spot_search_input_model"
      responses:
        '200':
          description: Spot list
          content:
            text/plain:
              schema:
                type: string
/Search/CoinSearch:
    get:
      tags:
      - Search
      summary: CoinSearch
      description: Powerful search of our coin universe
      parameters:
      - name: coin_symbols
        in: query
        description: ''
        schema:
          type: string
          description: ''
          nullable: true
          example: BTC,ETH
      - name: search_string
        in: query
        description: ''
        schema:
          type: string
          description: ''
          nullable: true
          example: ethereum
      - name: algorithm
        in: query
        description: ''
        schema:
          type: string
          description: ''
          nullable: true
          example: '1,2'
      - name: asset_type
        in: query
        description: ''
        schema:
          type: string
          description: ''
          nullable: true
          example: '1,2'
      - name: business_classification
        in: query
        description: ''
        schema:
          type: string
          description: ''
          nullable: true
          example: '1,2'
      - name: business_sub_classification
        in: query
        description: ''
        schema:
          type: string
          description: ''
          nullable: true
          example: '1,2'
      - name: consensus_model
        in: query
        description: ''
        schema:
          type: string
          description: ''
          nullable: true
          example: '1,2'
      - name: decentralisation_perspective
        in: query
        description: ''
        schema:
          type: string
          description: ''
          nullable: true
          example: '1,2'
      - name: transaction_anonimity
        in: query
        description: ''
        schema:
          type: string
          description: ''
          nullable: true
          example: '1,2'
      - name: mkt_cap_min
        in: query
        description: ''
        schema:
          type: number
          description: ''
          format: double
          nullable: true
          example: 1000000
      - name: mkt_cap_max
        in: query
        description: ''
        schema:
          type: number
          description: ''
          format: double
          nullable: true
          example: 10000000
      - name: chgpct_24h_min
        in: query
        description: ''
        schema:
          type: number
          description: ''
          format: double
          nullable: true
          example: -0.1
      - name: chgpct_24h_max
        in: query
        description: ''
        schema:
          type: number
          description: ''
          format: double
          nullable: true
          example: 0.1
      - name: total_coin_volume_24h_min
        in: query
        description: ''
        schema:
          type: number
          description: ''
          format: double
          nullable: true
          example: 1000000
      - name: total_coin_volume_24h_max
        in: query
        description: ''
        schema:
          type: number
          description: ''
          format: double
          nullable: true
          example: 1000000
      - name: ts_cutoff
        in: query
        description: ''
        schema:
          type: integer
          description: ''
          format: int64
          nullable: true
          example: 1589141374000
      - name: market_cap_category
        in: query
        description: ''
        schema:
          type: string
          description: ''
          nullable: true
          example: '1,2'
      - name: volume_category
        in: query
        description: ''
        schema:
          type: string
          description: ''
          nullable: true
          example: '1'
      - name: volatility_category
        in: query
        description: ''
        schema:
          type: string
          description: ''
          nullable: true
          example: '2,3'
      - name: perf_search
        in: query
        description: ''
        schema:
          type: array
          items:
            type: string
          description: ''
          nullable: true
      - name: order_by
        in: query
        description: ''
        schema:
          type: array
          items:
            type: string
          description: ''
          nullable: true
      - name: page_size
        in: query
        description: ''
        schema:
          type: integer
          description: ''
          format: int32
          default: 20
          example: 20
      - name: page_number
        in: query
        description: ''
        schema:
          type: integer
          description: ''
          format: int32
          default: 1
          example: 1
      - name: language_code
        in: query
        description: ''
        schema:
          type: string
          description: ''
          default: en
          nullable: true
          example: en
      - name: ccy
        in: query
        description: ''
        schema:
          type: string
          description: ''
          default: BTC
          nullable: true
          example: BTC
      - name: stablecoin
        in: query
        description: ''
        schema:
          type: boolean
          description: ''
          nullable: true
          example: true
      - name: mineable
        in: query
        description: ''
        schema:
          type: boolean
          description: ''
          nullable: true
          example: true
      - name: is_defi
        in: query
        description: ''
        schema:
          type: boolean
          description: ''
          nullable: true
          example: true
      responses:
        '200':
          description: Coin List
          content:
            text/plain:
              schema:
                type: string
    post:
      tags:
      - Search
      summary: CoinSearch
      description: Powerful search of our coin universe
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/coin_search_model_body"
          text/json:
            schema:
              "$ref": "#/components/schemas/coin_search_model_body"
          application/*+json:
            schema:
              "$ref": "#/components/schemas/coin_search_model_body"
      responses:
        '200':
          description: Coin List
/Search/IndexSearch:
    get:
      tags:
      - Search
      summary: IndexSearch
      description: Powerful search of our index universe
      parameters:
      - name: index_symbols
        in: query
        description: ''
        schema:
          type: string
          description: ''
          nullable: true
          example: CISBIG10,CISBIG50
      - name: business_classification
        in: query
        description: ''
        schema:
          type: string
          description: ''
          nullable: true
          example: '1'
      - name: index_mkt_cap_min
        in: query
        description: ''
        schema:
          type: number
          description: ''
          format: double
          nullable: true
          example: 10000000
      - name: index_mkt_cap_max
        in: query
        description: ''
        schema:
          type: number
          description: ''
          format: double
          nullable: true
          example: 10000000
      - name: chgpct_24h_min
        in: query
        description: ''
        schema:
          type: number
          description: ''
          format: double
          nullable: true
          example: -0.1
      - name: chgpct_24h_max
        in: query
        description: ''
        schema:
          type: number
          description: ''
          format: double
          nullable: true
          example: 0.1
      - name: total_index_volume_24h_min
        in: query
        description: ''
        schema:
          type: number
          description: ''
          format: double
          nullable: true
          example: 1000000
      - name: total_index_volume_24h_max
        in: query
        description: ''
        schema:
          type: number
          description: ''
          format: double
          nullable: true
          example: 1000000
      - name: ts_cutoff
        in: query
        description: ''
        schema:
          type: integer
          description: ''
          format: int64
          nullable: true
          example: 1589141374000
      - name: perf_search
        in: query
        description: ''
        schema:
          type: array
          items:
            type: string
          description: ''
          nullable: true
      - name: order_by
        in: query
        description: ''
        schema:
          type: array
          items:
            type: string
          description: ''
          nullable: true
      - name: page_size
        in: query
        description: ''
        schema:
          type: integer
          description: ''
          format: int32
          default: 20
          example: 20
      - name: page_number
        in: query
        description: ''
        schema:
          type: integer
          description: ''
          format: int32
          default: 1
          example: 1
      - name: language_code
        in: query
        description: ''
        schema:
          type: string
          description: ''
          default: en
          nullable: true
          example: en
      - name: ccy
        in: query
        description: ''
        schema:
          type: string
          description: ''
          default: USD
          nullable: true
          example: BTC
      responses:
        '200':
          description: Index List
/Search/QuickSearch:
    get:
      tags:
      - Search
      summary: QuickSearch
      description: Quickly search for coins, indices and sectors
      parameters:
      - name: search_string
        in: query
        description: ''
        schema:
          type: string
          description: ''
          nullable: true
          example: ABC
      - name: page_size
        in: query
        description: ''
        schema:
          type: integer
          description: ''
          format: int32
          default: 5
          example: 10
      - name: page_number
        in: query
        description: ''
        schema:
          type: integer
          description: ''
          format: int32
          default: 1
          example: 1
      - name: language_code
        in: query
        description: ''
        schema:
          type: string
          description: ''
          default: en
          nullable: true
          example: en
      responses:
        '200':
          description: Quick Search Results
/Search/QuickSearchCoin:
    get:
      tags:
      - Search
      summary: QuickSearchCoin
      description: Quickly search for coins
      parameters:
      - name: search_string
        in: query
        description: ''
        schema:
          type: string
          description: ''
          nullable: true
          example: ABC
      - name: page_size
        in: query
        description: ''
        schema:
          type: integer
          description: ''
          format: int32
          default: 5
          example: 10
      - name: page_number
        in: query
        description: ''
        schema:
          type: integer
          description: ''
          format: int32
          default: 1
          example: 1
      - name: language_code
        in: query
        description: ''
        schema:
          type: string
          description: ''
          default: en
          nullable: true
          example: en
      responses:
        '200':
          description: Quick Search Results
/Search/QuickSearchIndex:
    get:
      tags:
      - Search
      summary: QuickSearchIndex
      description: Quickly search for indices
      parameters:
      - name: search_string
        in: query
        description: ''
        schema:
          type: string
          description: ''
          nullable: true
          example: ABC
      - name: page_size
        in: query
        description: ''
        schema:
          type: integer
          description: ''
          format: int32
          default: 5
          example: 10
      - name: page_number
        in: query
        description: ''
        schema:
          type: integer
          description: ''
          format: int32
          default: 1
          example: 1
      - name: language_code
        in: query
        description: ''
        schema:
          type: string
          description: ''
          default: en
          nullable: true
          example: en
      responses:
        '200':
          description: Quick Search Results
/Search/QuickSearchSector:
    get:
      tags:
      - Search
      summary: QuickSearchSector
      description: Quickly search for Sectors
      parameters:
      - name: search_string
        in: query
        description: ''
        schema:
          type: string
          description: ''
          nullable: true
          example: ABC
      - name: page_size
        in: query
        description: ''
        schema:
          type: integer
          description: ''
          format: int32
          default: 5
          example: 10
      - name: page_number
        in: query
        description: ''
        schema:
          type: integer
          description: ''
          format: int32
          default: 1
          example: 1
      - name: language_code
        in: query
        description: ''
        schema:
          type: string
          description: ''
          default: en
          nullable: true
          example: en
      responses:
        '200':
          description: Quick Search Results
/Sector/GetSectorSummary:
    get:
      tags:
      - Sector
      summary: GetSectorSummary
      description: Get a summary of all sectors
      parameters:
      - name: order_by
        in: query
        description: ''
        schema:
          type: string
          description: ''
          nullable: true
          example: change_24h_pct,desc
      - name: language_code
        in: query
        description: ''
        schema:
          type: string
          description: ''
          default: en
          nullable: true
          example: en
      - name: ccy
        in: query
        description: ''
        schema:
          type: string
          description: ''
          default: BTC
          nullable: true
          example: BTC
      responses:
        '200':
          description: Sector Summary List
/Sector/GetSingleSectorSummary:
    get:
      tags:
      - Sector
      summary: GetSingleSectorSummary
      description: Get a summary for a specific sector
      parameters:
      - name: alphanumeric_code
        in: query
        description: ''
        required: true
        schema:
          type: string
          description: ''
          example: FIN
      - name: language_code
        in: query
        description: ''
        schema:
          type: string
          description: ''
          default: en
          nullable: true
          example: en
      - name: ccy
        in: query
        description: ''
        schema:
          type: string
          description: ''
          default: BTC
          nullable: true
          example: BTC
      responses:
        '200':
          description: Sector Summary
/Sector/GetSingleSectorCoins:
    get:
      tags:
      - Sector
      summary: GetSingleSectorCoins
      description: Get Coins in Sector
      parameters:
      - name: alphanumeric_code
        in: query
        required: true
        schema:
          type: string
      - name: language_code
        in: query
        schema:
          type: string
          default: en
          nullable: true
      - name: ccy
        in: query
        schema:
          type: string
          default: BTC
          nullable: true
      responses:
        '200':
          description: Success
/Sector/GetSingleSectorCoinPerformanceDetail:
    get:
      tags:
      - Sector
      summary: GetSingleSectorCoinPerformanceDetail
      description: Get coins in the sector with their performance data
      parameters:
      - name: alphanumeric_code
        in: query
        description: ''
        required: true
        schema:
          type: string
          description: ''
          example: FIN
      - name: language_code
        in: query
        description: ''
        schema:
          type: string
          description: ''
          default: en
          nullable: true
          example: en
      - name: ccy
        in: query
        description: ''
        schema:
          type: string
          description: ''
          default: BTC
          nullable: true
          example: BTC
      responses:
        '200':
          description: Coin Performance List
/Sector/GetSingleSectorCoinPerformanceDetailSummary:
    get:
      tags:
      - Sector
      summary: GetSingleSectorCoinPerformanceDetailSummary
      description: Get coins in the sector with their performance data for the top
        and bottom performers
      parameters:
      - name: alphanumeric_code
        in: query
        description: ''
        required: true
        schema:
          type: string
          description: ''
          example: FIN
      - name: language_code
        in: query
        description: ''
        schema:
          type: string
          description: ''
          default: en
          nullable: true
          example: en
      - name: ccy
        in: query
        description: ''
        schema:
          type: string
          description: ''
          default: BTC
          nullable: true
          example: BTC
      responses:
        '200':
          description: Coin Performance Lists
/Timeseries/GetTimeseries:
    get:
      tags:
      - Timeseries
      summary: GetTimeseries
      description: Get Timeseries for a symbol
      parameters:
      - name: symbol
        in: query
        description: Either cis_symbol OR cis_native_symbol is required
        schema:
          type: string
          description: Either cis_symbol OR cis_native_symbol is required
          nullable: true
          example: BTC-USDT.CISCALC
      - name: cis_native_symbol
        in: query
        description: Either cis_symbol OR cis_native_symbol is required
        schema:
          type: string
          description: Either cis_symbol OR cis_native_symbol is required
          nullable: true
          example: BNB_BTCUSDT
      - name: interval
        in: query
        description: tick,1m,5m,15m,30m,60m,1d
        schema:
          type: string
          description: tick,1m,5m,15m,30m,60m,1d
          nullable: true
          example: 1d
      - name: start
        in: query
        description: Unix ms timestamp
        schema:
          type: integer
          description: Unix ms timestamp
          format: int64
          nullable: true
          example: 1588756853000
      - name: end
        in: query
        description: Unix ms timestamp
        schema:
          type: integer
          description: Unix ms timestamp
          format: int64
          nullable: true
          example: 1588756853000
      - name: limit
        in: query
        description: max 2000
        schema:
          type: integer
          description: max 2000
          format: int32
          nullable: true
          example: 1000
      responses:
        '200':
          description: Timeseries data
          content:
            text/plain:
              schema:
                type: string
/Timeseries/GetAssetPricesByDate:
    get:
      tags:
      - Timeseries
      summary: GetAssetPricesByDate
      description: Fetch prices for all assets in db for a given date / key ccy
      parameters:
      - name: ccy
        in: query
        description: The key currency to fetch pricing data in
        schema:
          type: string
          description: The key currency to fetch pricing data in
          default: USD
          nullable: true
      - name: ts
        in: query
        description: The unix timestamp to retrieve asset pricing for, null returns
          the previous close
        schema:
          type: integer
          description: The unix timestamp to retrieve asset pricing for, null returns
            the previous close
          format: int64
          nullable: true
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
/XRef/GetAssetsBySource:
    get:
      tags:
      - XRef
      summary: GetAssetsBySource
      description: Fetch asset xref mappings for a list of source codes
      parameters:
      - name: source_codes
        in: query
        description: Comma separated list of source codes
        schema:
          type: string
          description: Comma separated list of source codes
          nullable: true
          example: BNB,GEM,HUO
      responses:
        '200':
          description: Success
/XRef/GetSpotSymbolsBySource:
    get:
      tags:
      - XRef
      summary: GetSpotSymbolsBySource
      description: Fetch spot instruments xref mappings for a soure_code
      parameters:
      - name: source_code
        in: query
        description: Source code to search on
        required: true
        schema:
          type: string
          description: Source code to search on
          example: BNB
      - name: page_number
        in: query
        description: Page Number
        schema:
          type: integer
          description: Page Number
          format: int32
          default: 1
          example: 1
      - name: page_size
        in: query
        description: Page Size (Max 1000)
        schema:
          type: integer
          description: Page Size (Max 1000)
          format: int32
          default: 1000
          example: 100
      - name: dt
        in: query
        description: Unix timestamp (milliseconds)
        schema:
          type: integer
          description: Unix timestamp (milliseconds)
          format: int64
          nullable: true
          example: 1499865549590
      responses:
        '200':
          description: Success
/portfolio/cis-portfolio/account/{account_id}/trade/document:
    get:
      tags:
      - "Trade"
      summary: "List Trade Documents"
      parameters:
      - name: "account_id"
        in: "path"
        description: "ID of the account belongs to user."
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "Successful response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
      security:
      - CustomAuthorizerRequest: []
    options:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
  /trading/cis-trading/{key_id}/trades:
    get:
      tags:
      - "Trading"
      summary: "Fetch Trades"
      parameters:
      - name: "key_id"
        in: "path"
        description: "ID of the account/key that belongs to user."
        required: true
        schema:
          type: "string"
      - name: "symbol"
        in: "query"
        description: "Native symbol of the trades "
        schema:
          type: "string"
      responses:
        "200":
          description: "Successful response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
      security:
      - CustomAuthorizerRequest: []
    options:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
  /portfolio/cis-portfolio/account/{account_id}/trade:
    post:
      tags:
      - "Trade"
      summary: "Add Trade"
      parameters:
      - name: "account_id"
        in: "path"
        description: "ID of the account belongs to user."
        required: true
        schema:
          type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TradeRequest"
        required: true
      responses:
        "200":
          description: "Successful response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
      security:
      - CustomAuthorizerRequest: []
    options:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
  /portfolio/cis-portfolio/account/{account_id}:
    put:
      tags:
      - "Account CRUD"
      summary: "Update Account Name"
      parameters:
      - name: "account_id"
        in: "path"
        description: "ID of the account belongs to user."
        required: true
        schema:
          type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateAccount"
        required: true
      responses:
        "200":
          description: "Successful response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
      security:
      - CustomAuthorizerRequest: []
    delete:
      tags:
      - "Account CRUD"
      summary: "Delete Account"
      parameters:
      - name: "account_id"
        in: "path"
        description: "ID of the account belongs to user."
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "Successful response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
      security:
      - CustomAuthorizerRequest: []
    options:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
  /portfolio/cis-portfolio/account/{account_id}/document/export/trade:
    post:
      tags:
      - "Document"
      summary: "Export Trade Document"
      parameters:
      - name: "account_id"
        in: "path"
        description: "ID of the account belongs to user."
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "Successful response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
      security:
      - CustomAuthorizerRequest: []
    options:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
  /portfolio/cis-portfolio/account/{account_id}/transfer/{transfer_id}:
    put:
      tags:
      - "Transfer"
      summary: "Update Transfer"
      parameters:
      - name: "transfer_id"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "account_id"
        in: "path"
        description: "ID of the account belongs to user."
        required: true
        schema:
          type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TransferRequest"
        required: true
      responses:
        "200":
          description: "Successful response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
      security:
      - CustomAuthorizerRequest: []
    delete:
      tags:
      - "Transfer"
      summary: "Delete Transfer"
      parameters:
      - name: "transfer_id"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "account_id"
        in: "path"
        description: "ID of the account belongs to user."
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "Successful response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
      security:
      - CustomAuthorizerRequest: []
    options:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
  /portfolio/cis-portfolio/account/{account_id}/document/export/transfer:
    post:
      tags:
      - "Document"
      summary: "Export Transfer Document"
      parameters:
      - name: "account_id"
        in: "path"
        description: "ID of the account belongs to user."
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "Successful response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
      security:
      - CustomAuthorizerRequest: []
    options:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
  /trading/cis-trading/{key_id}/balances:
    get:
      tags:
      - "Trading"
      summary: "Fetch Balances"
      parameters:
      - name: "key_id"
        in: "path"
        description: "ID of the account/key that belongs to user."
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "Successful response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
      security:
      - CustomAuthorizerRequest: []
    options:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
  /portfolio/cis-portfolio/account/{account_id}/transfer:
    post:
      tags:
      - "Transfer"
      summary: "Add Transfer"
      parameters:
      - name: "account_id"
        in: "path"
        description: "ID of the account belongs to user."
        required: true
        schema:
          type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TransferRequest"
        required: true
      responses:
        "200":
          description: "Successful response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
      security:
      - CustomAuthorizerRequest: []
    options:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
  /portfolio/cis-portfolio/portfolio:
    get:
      tags:
      - "Portfolio CRUD"
      summary: "Get Portfolios of User"
      responses:
        "200":
          description: "Successful response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
      security:
      - CustomAuthorizerRequest: []
    post:
      tags:
      - "Portfolio CRUD"
      summary: "Create Portfolio"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PortfolioRequest"
        required: true
      responses:
        "200":
          description: "Successful response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
      security:
      - CustomAuthorizerRequest: []
    options:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
  /portfolio/cis-portfolio/account/{account_id}/trade/{trade_id}:
    put:
      tags:
      - "Trade"
      summary: "Update Trade"
      parameters:
      - name: "trade_id"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "account_id"
        in: "path"
        description: "ID of the account belongs to user."
        required: true
        schema:
          type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TradeRequest"
        required: true
      responses:
        "200":
          description: "Successful response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
      security:
      - CustomAuthorizerRequest: []
    delete:
      tags:
      - "Trade"
      summary: "Delete Trade"
      parameters:
      - name: "trade_id"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "account_id"
        in: "path"
        description: "ID of the account belongs to user."
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "Successful response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
      security:
      - CustomAuthorizerRequest: []
    options:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
  /portfolio/cis-portfolio/portfolio/{portfolio_id}/account:
    get:
      tags:
      - "Account-Portfolio Relation"
      summary: "Get Accounts of Portfolio"
      parameters:
      - name: "portfolio_id"
        in: "path"
        description: "ID of the portfolio belongs to user."
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "Successful response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
      security:
      - CustomAuthorizerRequest: []
    options:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
  /portfolio/cis-portfolio/portfolio/{portfolio_id}/account/{account_id}:
    put:
      tags:
      - "Account-Portfolio Relation"
      summary: "Add Account to Portfolio"
      parameters:
      - name: "portfolio_id"
        in: "path"
        description: "ID of the portfolio belongs to user."
        required: true
        schema:
          type: "string"
      - name: "account_id"
        in: "path"
        description: "ID of the account belongs to user."
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "Successful response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
      security:
      - CustomAuthorizerRequest: []
    delete:
      tags:
      - "Account-Portfolio Relation"
      summary: "Delete Account from Portfolio"
      parameters:
      - name: "portfolio_id"
        in: "path"
        description: "ID of the portfolio belongs to user."
        required: true
        schema:
          type: "string"
      - name: "account_id"
        in: "path"
        description: "ID of the account belongs to user."
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "Successful response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
      security:
      - CustomAuthorizerRequest: []
    options:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
  /portfolio/cis-portfolio/account/{account_id}/document/{document_id}:
    get:
      tags:
      - "Document"
      summary: "Download a Document"
      parameters:
      - name: "document_id"
        in: "path"
        description: "ID of the document belongs to user."
        required: true
        schema:
          type: "string"
      - name: "account_id"
        in: "path"
        description: "ID of the account belongs to user."
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "Successful response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
      security:
      - CustomAuthorizerRequest: []
    options:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
  /portfolio/cis-portfolio/account/{account_id}/document/import/trade:
    post:
      tags:
      - "Document"
      summary: "Import Trade Document"
      parameters:
      - name: "account_id"
        in: "path"
        description: "ID of the account belongs to user."
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "Successful response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
      security:
      - CustomAuthorizerRequest: []
    options:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
  /portfolio/cis-portfolio/balance/history:
    get:
      tags:
      - "Balance"
      summary: "Balance History Request"
      parameters:
      - name: "ccy"
        in: "query"
        description: "Currency"
        schema:
          type: "string"
      - name: "account_ids"
        in: "query"
        description: "List of account ids in a comma-seperated fashion"
        schema:
          type: "string"
      responses:
        "200":
          description: "Successful response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
      security:
      - CustomAuthorizerRequest: []
    options:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
  /portfolio/cis-portfolio/account:
    get:
      tags:
      - "Account CRUD"
      summary: "Get Accounts of User"
      responses:
        "200":
          description: "Successful response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
      security:
      - CustomAuthorizerRequest: []
    post:
      tags:
      - "Account CRUD"
      summary: "Create Exchange Account"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateAccount"
        required: true
      responses:
        "200":
          description: "Successful response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
      security:
      - CustomAuthorizerRequest: []
    options:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
  /trading/cis-trading/{key_id}/order:
    post:
      tags:
      - "Trading"
      summary: "Create Order"
      parameters:
      - name: "key_id"
        in: "path"
        description: "ID of the account/key that belongs to user."
        required: true
        schema:
          type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrderRequest"
        required: true
      responses:
        "200":
          description: "Successful response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
      security:
      - CustomAuthorizerRequest: []
    options:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
  /trading/cis-trading/{key_id}/order/{order_id}:
    get:
      tags:
      - "Trading"
      summary: "Read Order"
      parameters:
      - name: "key_id"
        in: "path"
        description: "ID of the account/key that belongs to user."
        required: true
        schema:
          type: "string"
      - name: "symbol"
        in: "query"
        description: "Native Symbol of the order "
        schema:
          type: "string"
      - name: "order_id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "Successful response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
      security:
      - CustomAuthorizerRequest: []
    delete:
      tags:
      - "Trading"
      summary: "Cancel Order"
      parameters:
      - name: "key_id"
        in: "path"
        description: "ID of the account/key that belongs to user."
        required: true
        schema:
          type: "string"
      - name: "symbol"
        in: "query"
        description: "Native symbol of the order intented to be deleted"
        schema:
          type: "string"
      - name: "order_id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "Successful response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
      security:
      - CustomAuthorizerRequest: []
    options:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
  /portfolio/cis-portfolio/balance:
    get:
      tags:
      - "Balance"
      summary: "Current Balance Request"
      parameters:
      - name: "account_ids"
        in: "query"
        description: "List of account ids in a comma-seperated fashion"
        schema:
          type: "string"
      responses:
        "200":
          description: "Successful response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
      security:
      - CustomAuthorizerRequest: []
    options:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
  /portfolio/cis-portfolio/portfolio/{portfolio_id}:
    put:
      tags:
      - "Portfolio CRUD"
      summary: "Update Portfolio"
      parameters:
      - name: "portfolio_id"
        in: "path"
        description: "ID of the portfolio belongs to user."
        required: true
        schema:
          type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PortfolioRequest"
        required: true
      responses:
        "200":
          description: "Successful response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
      security:
      - CustomAuthorizerRequest: []
    delete:
      tags:
      - "Portfolio CRUD"
      summary: "Delete Portfolio"
      parameters:
      - name: "portfolio_id"
        in: "path"
        description: "ID of the portfolio belongs to user."
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "Successful response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
      security:
      - CustomAuthorizerRequest: []
    options:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
  /trading/cis-trading/{key_id}/order/open:
    get:
      tags:
      - "Trading"
      summary: "Get Open Orders"
      parameters:
      - name: "key_id"
        in: "path"
        description: "ID of the account/key that belongs to user."
        required: true
        schema:
          type: "string"
      - name: "symbol"
        in: "query"
        description: "Native symbol of the orders"
        schema:
          type: "string"
      responses:
        "200":
          description: "Successful response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
      security:
      - CustomAuthorizerRequest: []
    options:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
  /portfolio/cis-portfolio/account/{account_id}/transfer/document:
    get:
      tags:
      - "Transfer"
      summary: "List Transfer Documents"
      parameters:
      - name: "account_id"
        in: "path"
        description: "ID of the account belongs to user."
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "Successful response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
      security:
      - CustomAuthorizer: []
    options:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
  /portfolio/cis-portfolio/trade:
    get:
      tags:
      - "Trade"
      summary: "Trade History Request"
      parameters:
      - name: "start"
        in: "query"
        description: "Filter trades made after this date"
        schema:
          type: "string"
      - name: "quoted_assets"
        in: "query"
        description: "Filter trades that has these assets as quoted asset"
        schema:
          type: "string"
      - name: "page_size"
        in: "query"
        description: "How many items returned on single call (page)"
        schema:
          type: "string"
      - name: "page_number"
        in: "query"
        description: "Used to get results that are next in line"
        schema:
          type: "string"
      - name: "end"
        in: "query"
        description: "Filter trades made before this date"
        schema:
          type: "string"
      - name: "base_assets"
        in: "query"
        description: "Filter trades that has these assets as base asset"
        schema:
          type: "string"
      - name: "exchange_codes"
        in: "query"
        description: "Filter trades that is performed on given exchange(s)"
        schema:
          type: "string"
      - name: "account_ids"
        in: "query"
        description: "List of account ids in comma-seperated fashion"
        schema:
          type: "string"
      - name: "asset_types"
        in: "query"
        description: "?"
        schema:
          type: "string"
      - name: "order_by_field"
        in: "query"
        description: "Order result by given field"
        schema:
          type: "string"
      - name: "order_by_direction"
        in: "query"
        description: "Ordering direction (asc|desc)"
        schema:
          type: "string"
      - name: "portfolio_id"
        in: "query"
        description: "Id of portfolio to read trade history from"
        schema:
          type: "string"
      responses:
        "200":
          description: "Successful response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
      security:
      - CustomAuthorizerRequest: []
    options:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
  /portfolio/cis-portfolio/account/{account_id}/document/import/transfer:
    post:
      tags:
      - "Document"
      summary: "Import Transfer Document"
      parameters:
      - name: "account_id"
        in: "path"
        description: "ID of the account belongs to user."
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "Successful response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
      security:
      - CustomAuthorizerRequest: []
    options:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
  /portfolio/cis-portfolio/transfer:
    get:
      tags:
      - "Transfer"
      summary: "Transfer History Request"
      parameters:
      - name: "start"
        in: "query"
        description: "Filter transfers made after this date"
        schema:
          type: "string"
      - name: "page_size"
        in: "query"
        description: "How many items returned on single call (page)"
        schema:
          type: "string"
      - name: "page_number"
        in: "query"
        description: "Used to get results that are next in line"
        schema:
          type: "string"
      - name: "end"
        in: "query"
        description: "Filter transfers made before this date"
        schema:
          type: "string"
      - name: "account_ids"
        in: "query"
        description: "List of account ids in comma-seperated fashion to read transfers\
          \ from"
        schema:
          type: "string"
      - name: "order_by_field"
        in: "query"
        description: "Order result by given field"
        schema:
          type: "string"
      - name: "order_by_direction"
        in: "query"
        description: "Ordering direction (asc|desc)"
        schema:
          type: "string"
      - name: "portfolio_id"
        in: "query"
        description: "Id of portfolio to read trade history from"
        schema:
          type: "string"
      - name: "assets"
        in: "query"
        description: "Filter transfers that are made with these asset(s)"
        schema:
          type: "string"
      responses:
        "200":
          description: "Successful response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
      security:
      - CustomAuthorizerRequest: []
    options:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
                
             
components:
  schemas:
    Empty:
      type: "object"
    PortfolioRequest:
      required:
      - "name"
      type: "object"
      properties:
        name:
          type: "string"
    TradeRequest:
      required:
      - "base_amount"
      - "price"
      - "quote_amount"
      - "symbol"
      - "trade_ts"
      - "type"
      type: "object"
      properties:
        trade_ts:
          type: "integer"
        type:
          type: "string"
        symbol:
          type: "string"
        base_amount:
          type: "number"
        quote_amount:
          type: "integer"
        price:
          type: "integer"
    OrderRequest:
      required:
      - "amount"
      - "price"
      - "side"
      - "symbol"
      - "type"
      type: "object"
      properties:
        symbol:
          type: "string"
        type:
          type: "string"
        side:
          type: "string"
        amount:
          type: "integer"
        price:
          type: "integer"
        exchangeSpecificParams:
          type: "object"
    CreateAccount:
      required:
      - "name"
      - "type"
      type: "object"
      properties:
        name:
          type: "string"
        type:
          type: "string"
        exchange_information:
          required:
          - "credentials"
          - "exchange_code"
          - "exchange_name"
          type: "object"
          properties:
            exchange_code:
              type: "string"
            exchange_name:
              type: "string"
            credentials:
              type: "string"
    UpdateAccount:
      required:
      - "name"
      type: "object"
      properties:
        name:
          type: "string"
    TransferRequest:
      required:
      - "asset_amount"
      - "asset_symbol"
      - "transfer_ts"
      - "type"
      type: "object"
      properties:
        transfer_ts:
          type: "integer"
        type:
          type: "string"
        asset_symbol:
          type: "string"
        asset_amount:
          type: "integer"
          
get_asset_prices_request_model:
      required:
      - assets
      type: object
      properties:
        assets:
          type: string
        ccy:
          type: string
          nullable: true
      additionalProperties: false
    indicator_request:
      type: object
      properties:
        indicator_code:
          type: string
          nullable: true
        indicator_ts:
          type: integer
          format: int64
          nullable: true
        parameters:
          type: object
          additionalProperties:
            type: object
            additionalProperties: false
          nullable: true
      additionalProperties: false
    is_indicator_request:
      type: object
      properties:
        symbol:
          type: string
          nullable: true
        cis_native_symbol:
          type: string
          nullable: true
        interval:
          type: string
          nullable: true
        indicator_requests:
          type: array
          items:
            "$ref": "#/components/schemas/indicator_request"
          nullable: true
      additionalProperties: false
    news_search_model_body:
      type: object
      properties:
        news_sources:
          type: string
          nullable: true
        tags:
          type: array
          items:
            type: string
          nullable: true
        keywords_search:
          type: string
          nullable: true
        min_publication_datetime:
          type: integer
          format: int64
          nullable: true
        max_publication_datetime:
          type: integer
          format: int64
          nullable: true
        min_sentiment:
          type: number
          format: double
          nullable: true
        max_sentiment:
          type: number
          format: double
          nullable: true
        order_by:
          type: array
          items:
            type: string
          nullable: true
        language_code:
          type: string
          nullable: true
        page_size:
          type: integer
          format: int32
        page_number:
          type: integer
          format: int32
      additionalProperties: false
    spot_search_order_by:
      enum:
      - symbol
      - n
      - v
      - vto
      - chgpct
      type: string
    order_by_direction:
      enum:
      - asc
      - desc
      type: string
    srch_spot_search_input_model:
      type: object
      properties:
        search_string:
          type: string
          nullable: true
        source_code:
          type: array
          items:
            type: string
          nullable: true
        source_rating_code:
          type: array
          items:
            type: string
          nullable: true
        is_exchange:
          type: boolean
          nullable: true
        is_connectable:
          type: boolean
          nullable: true
        base_asset:
          type: array
          items:
            type: string
          nullable: true
        quoted_asset:
          type: array
          items:
            type: string
          nullable: true
        page_number:
          type: integer
          format: int32
        page_size:
          type: integer
          format: int32
        order_by_field:
          "$ref": "#/components/schemas/spot_search_order_by"
        order_by_direction:
          "$ref": "#/components/schemas/order_by_direction"
        language_code:
          type: string
          nullable: true
      additionalProperties: false
    coin_search_model_body:
      type: object
      properties:
        coin_symbols:
          type: string
          nullable: true
        search_string:
          type: string
          nullable: true
        algorithm:
          type: string
          nullable: true
        asset_type:
          type: string
          nullable: true
        business_classification:
          type: string
          nullable: true
        business_sub_classification:
          type: string
          nullable: true
        consensus_model:
          type: string
          nullable: true
        decentralisation_perspective:
          type: string
          nullable: true
        transaction_anonimity:
          type: string
          nullable: true
        mkt_cap_min:
          type: number
          format: double
          nullable: true
        mkt_cap_max:
          type: number
          format: double
          nullable: true
        chgpct_24h_min:
          type: number
          format: double
          nullable: true
        chgpct_24h_max:
          type: number
          format: double
          nullable: true
        total_coin_volume_24h_min:
          type: number
          format: double
          nullable: true
        total_coin_volume_24h_max:
          type: number
          format: double
          nullable: true
        ts_cutoff:
          type: integer
          format: int64
          nullable: true
        perf_search:
          type: array
          items:
            type: string
          nullable: true
        order_by:
          type: array
          items:
            type: string
          nullable: true
        page_size:
          type: integer
          format: int32
        page_number:
          type: integer
          format: int32
        language_code:
          type: string
          nullable: true
        ccy:
          type: string
          nullable: true
        market_cap_category:
          type: string
          nullable: true
        volume_category:
          type: string
          nullable: true
        volatility_category:
          type: string
          nullable: true
        mineable:
          type: boolean
          nullable: true
        stablecoin:
          type: boolean
          nullable: true
        is_defi:
          type: boolean
          nullable: true
      additionalProperties: false
      

  securitySchemes:
    CustomAuthorizer:
      type: "apiKey"
      name: "Authorization"
      in: "header"
      x-amazon-apigateway-authtype: "custom"
    CustomAuthorizerRequest:
      type: "apiKey"
      name: "Unused"
      in: "header"
      x-amazon-apigateway-authtype: "custom"
x-tagGroups:
- name: "Data API"
  tags:
  - "Coin"
  - "Exchange"
  - "Index"
  - "Metadata"
  - "News"
  - "Search"
  - "Sector"
  - "Timeseries"
  - "Asset"
  - "Indicator"
  - "XRef"
- name: "Portfolio And Account"
  tags:
  - "Portfolio CRUD"
  - "Account CRUD"
  - "Account-Portfolio Relation"
  - "Balance"
  - "Trade"
  - "Transfer"
  - "Document"
- name: "Exchange API"
  tags:
  - "Trading"
